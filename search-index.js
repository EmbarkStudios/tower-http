var N = null;var searchIndex = {};
searchIndex["http_body"]={"doc":"","items":[[8,"Body","http_body","Trait representing a streaming body of a Request or…",N,N],[16,"Item","","Values yielded by the `Body`.",0,N],[16,"Error","","The error type this `BufStream` might generate.",0,N],[10,"poll_buf","","Attempt to pull out the next buffer of this stream,…",0,[[["self"]],["poll",["option"]]]],[11,"size_hint","","Returns the bounds on the remaining length of the stream.",0,[[["self"]],["sizehint"]]],[10,"poll_trailers","","Poll for an optional single `HeaderMap` of trailers.",0,[[["self"]],["poll",["option"]]]],[11,"is_end_stream","","Returns `true` when the end of stream has been reached.",0,[[["self"]],["bool"]]]],"paths":[[8,"Body"]]};
searchIndex["tower_add_origin"]={"doc":"","items":[[3,"AddOrigin","tower_add_origin","Wraps an HTTP service, injecting authority and scheme on…",N,N],[3,"Builder","","Configure an `AddOrigin` instance",N,N],[3,"BuilderError","","Errors that can happen when building an `AddOrigin`.",N,N],[11,"new","","Create a new `AddOrigin`",0,[[["t"],["scheme"],["authority"]],["self"]]],[11,"scheme","","Return a reference to the HTTP scheme that is added to all…",0,[[["self"]],["scheme"]]],[11,"authority","","Return a reference to the HTTP authority that is added to…",0,[[["self"]],["authority"]]],[11,"get_ref","","Returns a reference to the inner service.",0,[[["self"]],["t"]]],[11,"get_mut","","Returns a mutable reference to the inner service.",0,[[["self"]],["t"]]],[11,"into_inner","","Consumes `self`, returning the inner service.",0,[[["self"]],["t"]]],[11,"new","","Return a new, default builder",1,[[],["self"]]],[11,"uri","","Set the URI to use as the origin for all requests.",1,[[["self"],["t"]],["self"]]],[11,"build","","",1,[[["self"],["t"]],["result",["addorigin","buildererror"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"default","","",1,[[],["builder"]]],[11,"clone","","",0,[[["self"]],["addorigin"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"poll_ready","","",0,[[["self"]],["poll"]]],[11,"call","","",0,N]],"paths":[[3,"AddOrigin"],[3,"Builder"],[3,"BuilderError"]]};
searchIndex["tower_http"]={"doc":"","items":[[8,"Body","tower_http","Trait representing a streaming body of a Request or…",N,N],[16,"Item","","Values yielded by the `Body`.",0,N],[16,"Error","","The error type this `BufStream` might generate.",0,N],[10,"poll_buf","","Attempt to pull out the next buffer of this stream,…",0,[[["self"]],["result",["async"]]]],[11,"size_hint","","Returns the bounds on the remaining length of the stream.",0,[[["self"]],["sizehint"]]],[10,"poll_trailers","","Poll for an optional single `HeaderMap` of trailers.",0,[[["self"]],["result",["async"]]]],[11,"is_end_stream","","Returns `true` when the end of stream has been reached.",0,[[["self"]],["bool"]]],[8,"BodyExt","","An extension trait for `Body` providing additional adapters.",N,N],[11,"into_buf_stream","","Wrap the `Body` so that it implements tokio_buf::BufStream…",1,[[["self"]],["intobufstream"]]],[8,"HttpService","","An HTTP service",N,N],[16,"ResponseBody","","Response payload.",2,N],[16,"Error","","Errors produced by the service.",2,N],[16,"Future","","The future response value.",2,N],[10,"poll_ready","","Returns `Ready` when the service is able to process…",2,[[["self"]],["result",["async"]]]],[10,"call","","Process the request and return the response asynchronously.",2,N],[11,"into_service","","Wrap the HttpService so that it implements…",2,[[["self"]],["intoservice"]]],[11,"as_service","","Same as `into_service` but operates on an HttpService…",2,[[["self"]],["asservice"]]]],"paths":[[8,"Body"],[8,"BodyExt"],[8,"HttpService"]]};
searchIndex["tower_http_util"]={"doc":"Specialization of `tower::Service` for working with HTTP…","items":[[0,"body","tower_http_util","Types and utilities for working with `Body`.",N,N],[3,"IntoBufStream","tower_http_util::body","Wraps a `Body` instance, implementing…",N,N],[8,"BodyExt","","An extension trait for `Body` providing additional adapters.",N,N],[11,"into_buf_stream","","Wrap the `Body` so that it implements tokio_buf::BufStream…",0,[[["self"]],["intobufstream"]]],[0,"service","tower_http_util","Types and utilities for working with `HttpService`",N,N],[3,"AsService","tower_http_util::service","Wraps an `HttpService` reference, implementing…",N,N],[3,"IntoService","","Wraps an `HttpService` instance, implementing…",N,N],[8,"HttpService","","An HTTP service",N,N],[16,"ResponseBody","","Response payload.",1,N],[16,"Error","","Errors produced by the service.",1,N],[16,"Future","","The future response value.",1,N],[10,"poll_ready","","Returns `Ready` when the service is able to process…",1,[[["self"]],["poll"]]],[10,"call","","Process the request and return the response asynchronously.",1,N],[11,"into_service","","Wrap the HttpService so that it implements…",1,[[["self"]],["intoservice"]]],[11,"as_service","","Same as `into_service` but operates on an HttpService…",1,[[["self"]],["asservice"]]],[11,"from","tower_http_util::body","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"poll_buf","","",2,[[["self"]],["result",["async"]]]],[11,"size_hint","","",2,[[["self"]],["sizehint"]]],[11,"poll_trailers","","",2,[[["self"]],["result",["async"]]]],[11,"is_end_stream","","",2,[[["self"]],["bool"]]],[11,"poll_ready","tower_http_util::service","",3,[[["self"]],["result",["async"]]]],[11,"call","","",3,N],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"poll_ready","","",4,[[["self"]],["result",["async"]]]],[11,"call","","",4,N],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"fmt","tower_http_util::body","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","tower_http_util::service","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"poll_buf","tower_http_util::body","",2,[[["self"]],["poll",["option"]]]],[11,"size_hint","","",2,[[["self"]],["sizehint"]]],[11,"poll_ready","tower_http_util::service","",3,[[["self"]],["poll"]]],[11,"call","","",3,N],[11,"poll_ready","","",4,[[["self"]],["poll"]]],[11,"call","","",4,N]],"paths":[[8,"BodyExt"],[8,"HttpService"],[3,"IntoBufStream"],[3,"AsService"],[3,"IntoService"]]};
initSearch(searchIndex);addSearchOptions(searchIndex);
